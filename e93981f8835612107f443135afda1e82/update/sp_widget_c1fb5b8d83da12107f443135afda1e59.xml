<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function (spUtil, $http) {
	/* widget controller */
	var c = this;
	c.html = "";
	c.query = "";
	c.timeTaken = 0;
	c.startTime = "";

	var converter = new showdown.Converter();
	//c.html = converter.makeHtml(md);



	c.llmSearch = (query) => {

		// Check for answer in L1 cache.
		c.startTime = new Date();
		c.server.get({ action: "ansInL1", query: query }).then(function (answer) {

			if (answer.data.ans == "" || answer.data.ans == null) {

				// RAG via Ai Search
				var config = [{
					definitionSysId: '0cac8b3073ad101052c7d5fdbdf6a78a',
					type: 'GRAPHQL',
					inputValues: {
						searchContextConfigId: {
							type: 'JSON_LITERAL',
							value: "7296910f53171010069addeeff7b12e7"
						},
						searchTerm: {
							type: 'JSON_LITERAL',
							value: query
						},
						searchEvamConfigId: {
							type: 'JSON_LITERAL',
							value: "9264a1c353571010069addeeff7b121e"
						},
						facetFilters: {
							type: 'JSON_LITERAL',
							value: null
						},
						searchFilters: {
							type: 'JSON_LITERAL',
							value: []
						},
						disableSpellCheck: {
							type: 'JSON_LITERAL',
							value: 'false'
						},
						paginationToken: {
							type: 'JSON_LITERAL',
							value: null
						},
						sortOptions: {
							type: 'JSON_LITERAL',
							value: []
						},
						asyncParams: {
							type: 'JSON_LITERAL',
							value: '{asyncMode: \"GR_ONLY\", callbackType: \"AMB\"}'
						}
					}
				}];

				var url = spUtil.getHost() + '/api/now/uxf/databroker/exec';

				$http.post(url, config).then(function (response) {

					// Process AIS response
					c.items = response.data.result[0].executionResult.searchResultsTemplates.items;
					c.kbList = c.items.map(item => (item.propValues.model.table == "kb_knowledge" ? item.propValues.model.number : ""));
					c.kbList = c.kbList.filter(item => item != "");

					// Generate Context from KB article body
					c.server.get({ action: "getContext", kbNums: c.kbList }).then(function (resp) {


						c.context = resp.data.context;

						// call Now LLM
						c.server.get({ action: "llmSearch", query: query, context: c.context }).then(function (res) {

							// Parse Now LLM answer
							var ans = document.getElementById("answer");
							c.html = converter.makeHtml(res.data.ans);
							ans.innerHTML = c.html;
							c.timeTaken = (new Date() - c.startTime) / 1000 + "s";

						});

					});



				});

			}
			else {
				var ans = document.getElementById("answer");
				c.html = converter.makeHtml(answer.data.ans);
				ans.innerHTML = c.html;
				c.timeTaken = (new Date() - c.startTime) / 1000 + "s";
			}

		});



	}
};]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>llm_home</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>LLM Home</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */


	data.ans = "";
	data.context = "";
	
	
	if(input && input.action == "ansInL1"){
		data.ans = sn_scoped_cache.ScopedCacheManager.get("svngenaicache",input.query)
	}


	if(input && input.action == "getContext"){
		input.kbNums.forEach(function(kbNum){
			var kbGr = new GlideRecord("kb_knowledge");
			kbGr.addQuery("latest=true^workflow_state=published^sys_class_name=kb_knowledge^number="+kbNum);
			kbGr.setLimit(2);
			kbGr.query();

			while(kbGr.next()){
				data.context += kbGr.getValue("text");
			}

		});
	}



	if(input && input.action === "llmSearch"){

		try {
			var inputs = {};
			inputs['query'] = input.query; // String 
			inputs['context'] = input.context;
			// Start Asynchronously: Uncomment to run in background. Code snippet will not have access to outputs.
			// sn_fd.FlowAPI.getRunner().action('x_1234_genai.llm_search').inBackground().withInputs(inputs).run();

			// Execute Synchronously: Run in foreground. Code snippet has access to outputs.
			var result = sn_fd.FlowAPI.getRunner().action('x_1234_genai.llm_search').inForeground().withInputs(inputs).run();
			var outputs = result.getOutputs();

			// Get Outputs:
			// Note: outputs can only be retrieved when executing synchronously.
			data.ans = outputs['answer']; // String

			// Push the answer to L1 cache
			sn_scoped_cache.ScopedCacheManager.put("svngenaicache",input.query,data.ans);

		} catch (ex) {
			var message = ex.getMessage();
			gs.error(message);
		}


	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>svnadmin</sys_created_by>
        <sys_created_on>2024-12-04 15:35:01</sys_created_on>
        <sys_id>c1fb5b8d83da12107f443135afda1e59</sys_id>
        <sys_mod_count>67</sys_mod_count>
        <sys_name>LLM Home</sys_name>
        <sys_package display_value="GenAI" source="x_1234_genai">e93981f8835612107f443135afda1e82</sys_package>
        <sys_policy/>
        <sys_scope display_value="GenAI">e93981f8835612107f443135afda1e82</sys_scope>
        <sys_update_name>sp_widget_c1fb5b8d83da12107f443135afda1e59</sys_update_name>
        <sys_updated_by>svnadmin</sys_updated_by>
        <sys_updated_on>2024-12-11 13:14:02</sys_updated_on>
        <template><![CDATA[<div class = "from-group">
  <label for = "query" >${Enter your Query}</label>
  <input type = "text" class = "form-control" ng-model = "c.query"/>
  <br/>
  <button class = "btn btn-primary" ng-click = "c.llmSearch(c.query)">
    ${Submit}
  </button>
  <br/>

  <br/> <br/> <br/> <br/>


  <span id = "answer">

  </span>
<br/>
  <br/>
  <p ng-if = "c.timeTaken != 0">
    Time Taken: {{c.timeTaken}}
  </p>
</div>]]></template>
    </sp_widget>
</record_update>

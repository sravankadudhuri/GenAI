<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Custom Skill Kit">8ce35138831212107f443135afda1e9b</macroponent>
        <name>FilterInput</name>
        <preset/>
        <required_translations>[]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
function handler({
    api,
    event,
    helpers,
    imports
}) {
    console.log('finalFilters', api.state.filters);
    const filters = api.state.filters;

    const conditions = [];
    const operators = [];
    var currentConditionsGroup = [];
    var currentOperatorsGroup = [];
    var input = api.state.getSkillsInput;

    if((filters || []).length === 1 && filters[0].value === "") {
        input.filter_conditions = null;
    }

    else{
    for (var i = 0; i < (filters || []).length; i++) {
        const condition = filters[i];
        const conditionStr = `${condition.field} ${condition.operator} ${condition.value}`.trim();

        if (condition.conditionSet) {
            if (currentConditionsGroup.length > 0) {
                conditions.push(currentConditionsGroup);
                operators.push(currentOperatorsGroup);
                currentConditionsGroup = [];
                currentOperatorsGroup = [];
            }
        }

        currentConditionsGroup.push(conditionStr);

        if (condition.condition) {
            currentOperatorsGroup.push(condition.condition);
        }
    }

    if (currentConditionsGroup.length > 0) {
        conditions.push(currentConditionsGroup);
        operators.push(currentOperatorsGroup);
    }

    input.filter_conditions = {
        conditions,
        operators
    };
    }

    api.setState('getSkillsInput', input);
    // api.data.fetch_skills.execute({
    //     payload: JSON.stringify(input)
    // });
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>aislab.admin</sys_created_by>
        <sys_created_on>2024-12-03 11:02:08</sys_created_on>
        <sys_id>35e35d78831212107f443135afda1efc</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>FilterInput</sys_name>
        <sys_package display_value="GenAI" source="x_1234_genai">e93981f8835612107f443135afda1e82</sys_package>
        <sys_policy/>
        <sys_scope display_value="GenAI">e93981f8835612107f443135afda1e82</sys_scope>
        <sys_update_name>sys_ux_client_script_35e35d78831212107f443135afda1efc</sys_update_name>
        <sys_updated_by>aislab.admin</sys_updated_by>
        <sys_updated_on>2024-12-03 11:02:08</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
